(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{463:function(M,e,t){"use strict";t.r(e);var a=t(30),n=Object(a.a)({},(function(){var M=this,e=M.$createElement,t=M._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":M.$parent.slotKey}},[t("h2",{attrs:{id:"myisam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#myisam"}},[M._v("#")]),M._v(" MyISAM")]),M._v(" "),t("blockquote",[t("p",[M._v("在 5.1 版本之前，MyISAM 是 MySQL 的默认存储引擎，MyISAM 并发性比较差，使用的场景比较少，主要特点是")])]),M._v(" "),t("ul",[t("li",[t("p",[M._v("不支持事务操作，ACID 的特性也就不存在了，这一设计是为了性能和效率考虑的。")])]),M._v(" "),t("li",[t("p",[M._v("不支持外键操作，如果强行增加外键，MySQL 不会报错，只不过外键不起作用。")])]),M._v(" "),t("li",[t("p",[M._v("MyISAM 默认的锁粒度是表级锁，所以并发性能比较差，加锁比较快，锁冲突比较少，不太容易发生死锁的情况。")])]),M._v(" "),t("li",[t("p",[M._v("MyISAM 会在磁盘上存储三个文件，文件名和表名相同，扩展名分别是 .frm(存储表定义)、.MYD(MYData,存储数据)、MYI(MyIndex,存储索引)。这里需要特别注意的是 MyISAM 只缓存索引文件，并不缓存数据文件。")])]),M._v(" "),t("li",[t("p",[M._v("MyISAM 支持的索引类型有 全局索引(Full-Text)、B-Tree 索引、R-Tree 索引")])])]),M._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[M._v("Full-Text 索引：它的出现是为了解决针对文本的模糊查询效率较低的问题。\nB-Tree 索引：所有的索引节点都按照平衡树的数据结构来存储，所有的索引数据节点都在叶节点\nR-Tree索引：它的存储方式和 B-Tree 索引有一些区别，主要设计用于存储空间和多维数据的字段做索引,目前的 MySQL 版本仅支持 geometry 类型的字段作索引，相对于 BTREE，RTREE 的优势在于范围查找。\n")])])]),t("ul",[t("li",[t("p",[M._v("数据库所在主机如果宕机，MyISAM 的数据文件容易损坏，而且难以恢复。")])]),M._v(" "),t("li",[t("p",[M._v("增删改查性能方面：SELECT 性能较高，适用于查询较多的情况")])])]),M._v(" "),t("h2",{attrs:{id:"innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[M._v("#")]),M._v(" InnoDB")]),M._v(" "),t("blockquote",[t("p",[M._v("自从 MySQL 5.1 之后，默认的存储引擎变成了 InnoDB 存储引擎，相对于 MyISAM，InnoDB 存储引擎有了较大的改变，它的主要特点是")])]),M._v(" "),t("ul",[t("li",[M._v("支持事务操作，具有事务 ACID 隔离特性，默认的隔离级别是可重复读(repetable-read)、通过MVCC（并发版本控制）来实现的。能够解决脏读和不可重复读的问题。")]),M._v(" "),t("li",[M._v("InnoDB 支持外键操作。")]),M._v(" "),t("li",[M._v("InnoDB 默认的锁粒度行级锁，并发性能比较好，会发生死锁的情况。\n和 MyISAM 一样的是，InnoDB 存储引擎也有 .frm文件存储表结构 定义，但是不同的是，InnoDB 的表数据与索引数据是存储在一起的，都位于 B+ 数的叶子节点上，而 MyISAM 的表数据和索引数据是分开的。")]),M._v(" "),t("li",[M._v("InnoDB 有安全的日志文件，这个日志文件用于恢复因数据库崩溃或其他情况导致的数据丢失问题，保证数据的一致性。")]),M._v(" "),t("li",[M._v("InnoDB 和 MyISAM 支持的索引类型相同，但具体实现因为文件结构的不同有很大差异。\n增删改查性能方面，果执行大量的增删改操作，推荐使用 InnoDB 存储引擎，它在删除操作时是对行删除，不会重建表。")])]),M._v(" "),t("h2",{attrs:{id:"memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory"}},[M._v("#")]),M._v(" MEMORY")]),M._v(" "),t("blockquote",[t("p",[M._v("MEMORY 存储引擎使用存在内存中的内容来创建表。每个 MEMORY 表实际只对应一个磁盘文件，格式是 .frm。 MEMORY 类型的表访问速度很快，因为其数据是存放在内存中。默认使用 HASH 索引。")])]),M._v(" "),t("h2",{attrs:{id:"merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[M._v("#")]),M._v(" MERGE")]),M._v(" "),t("blockquote",[t("p",[M._v("MERGE 存储引擎是一组 MyISAM 表的组合，MERGE 表本身没有数据，对 MERGE 类型的表进行查询、更新、删除的操作，实际上是对内部的 MyISAM 表进行的。MERGE 表在磁盘上保留两个文件，一个是 .frm 文件存储表定义、一个是 .MRG 文件存储 MERGE 表的组成等。")])]),M._v(" "),t("h2",{attrs:{id:"选择合适的存储引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择合适的存储引擎"}},[M._v("#")]),M._v(" 选择合适的存储引擎")]),M._v(" "),t("ul",[t("li",[M._v("MyISAM：如果应用程序通常以检索为主，只有少量的插入、更新和删除操作，并且对事物的完整性、并发程度不是很高的话，通常建议选择 MyISAM 存储引擎。")]),M._v(" "),t("li",[M._v("InnoDB：如果使用到外键、需要并发程度较高，数据一致性要求较高，那么通常选择 InnoDB 引擎，一般互联网大厂对并发和数据完整性要求较高，所以一般都使用 InnoDB 存储引擎。")]),M._v(" "),t("li",[M._v("MEMORY：MEMORY 存储引擎将所有数据保存在内存中，在需要快速定位下能够提供及其迅速的访问。MEMORY 通常用于更新不太频繁的小表，用于快速访问取得结果。")]),M._v(" "),t("li",[M._v("MERGE：MERGE 的内部是使用 MyISAM 表，MERGE 表的优点在于可以突破对单个 MyISAM 表大小的限制，并且通过将不同的表分布在多个磁盘上， 可以有效地改善 MERGE 表的访问效率。")])])])}),[],!1,null,null,null);e.default=n.exports}}]);