(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{429:function(e,n,t){"use strict";t.r(n);var s=t(28),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://www.npmjs.com/package/nodemon",target:"_blank",rel:"noopener noreferrer"}},[e._v("nodemon官网"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("安装")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install -g nodemon\n")])])]),t("ul",[t("li",[e._v("启动")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("nodemon app.js\n")])])]),t("ul",[t("li",[e._v("debug启动")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("nodemon --debug app.js\n")])])]),t("ul",[t("li",[t("code",[e._v("nodemon.json")]),e._v("官网列子")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "restartable": "rs",\n  "ignore": [\n    ".git",\n    "node_modules/**/node_modules"\n  ],\n  "verbose": true,\n  "execMap": {\n    "js": "node --harmony"\n  },\n  "events": {\n    "restart": "osascript -e \'display notification \\"App restarted due to:\\n\'$FILENAME\'\\" with title \\"nodemon\\"\'"\n  },\n  "watch": [\n    "test/fixtures/",\n    "test/samples/"\n  ],\n  "env": {\n    "NODE_ENV": "development"\n  },\n  "ext": "js,json"\n}\n')])])]),t("ol",[t("li",[e._v("restartable:默认是rs，可以改成"),t("code",[e._v("指定字符串")]),e._v("。当用"),t("code",[e._v("nodemon")]),e._v("启动应用后可以直接键入"),t("code",[e._v("指定字符串或（rs）")]),e._v("重启服务。")]),e._v(" "),t("li",[e._v("ignore:忽略文件，路径相对于"),t("code",[e._v("nodemon.json")]),e._v("所在位置。")]),e._v(" "),t("li",[e._v("verbose:默认false，true 表示输出详细启动与重启信息。")]),e._v(" "),t("li",[e._v("execMap:运行文件的后缀名对应的运行命令，上述中"),t("code",[e._v('"js": "node --harmony"')]),e._v("表示"),t("code",[e._v("nodemon app.js")]),e._v("相当于"),t("code",[e._v("node --harmony app.js")]),e._v("。")]),e._v(" "),t("li",[e._v("events:"),t("code",[e._v("nodemon")]),e._v("运行到某些状态时触发事件\n"),t("ul",[t("li",[e._v("start - 子进程（即监控的应用）启动")]),e._v(" "),t("li",[e._v("restart - 子进程重启")]),e._v(" "),t("li",[e._v("crash - 子进程崩溃，不会触发 exit")]),e._v(" "),t("li",[e._v("exit - 子进程完全退出，不是非正常的崩溃")]),e._v(" "),t("li",[e._v("config:update - nodemon 的 config 文件改变")])])]),e._v(" "),t("li",[e._v("watch:监控的文件或文件夹路径。")]),e._v(" "),t("li",[e._v("env:设置环境变量。")]),e._v(" "),t("li",[e._v("ext:制定监控文件的后缀名。")])]),e._v(" "),t("ul",[t("li",[e._v("默认配置")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// default options for config.options\nmodule.exports = {\n    restartable: 'rs',\n    colours: true,\n    execMap: {\n        py: 'python',\n        rb: 'ruby',\n        // more can be added here such as ls: lsc - but please ensure it's cross\n        // compatible with linux, mac and windows, or make the default.js\n        // dynamically append the `.cmd` for node based utilities\n    },\n    ignoreRoot: ['.git', 'node_modules', 'bower_components', '.sass-cache'],\n    watch: ['*.*'],\n    stdin: true,\n    runOnChangeOnly: false,\n    verbose: false,\n    // 'stdout' refers to the default behaviour of a required nodemon's child,\n    // but also includes stderr. If this is false, data is still dispatched via\n    // nodemon.on('stdout/stderr')\n    stdout: true,\n};\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);