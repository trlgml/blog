(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{416:function(n,e,a){"use strict";a.r(e);var t=a(30),r=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("blockquote",[a("p",[n._v("提供一个插件化的javascript代码检测工具。")])]),n._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[n._v("#")]),n._v(" 安装")]),n._v(" "),a("blockquote",[a("p",[n._v("也可以在全局而不是本地安装 ESLint。但是，你使用的任何插件或可共享配置都必须安装在本地。")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("# 全局安装\nnpm install eslint -g\n# 本地安装\nnpm install eslint -D\n")])])]),a("h2",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[n._v("#")]),n._v(" 初始化")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" eslint --init\n")])])]),a("h2",{attrs:{id:"修复错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修复错误"}},[n._v("#")]),n._v(" 修复错误")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" eslint file --fix\n")])])]),a("h2",{attrs:{id:"文件格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件格式"}},[n._v("#")]),n._v(" 文件格式")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("JavaScript .eslintrc.js\nYAML       .eslintrc.yml\nJSON       .eslintrc.json\n")])])]),a("h2",{attrs:{id:"文件内容-eslintrc-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件内容-eslintrc-js"}},[n._v("#")]),n._v(" 文件内容(.eslintrc.js)")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('module.exports = {\n    "env": {\n        "browser": true,\n        "es6": true,\n        "node": true\n    },\n    "extends": [//继承一套基础配置\n        "eslint:recommended"\n    ],\n    "globals": {//额外的全局变量\n        "Atomics": "readonly",\n        "SharedArrayBuffer": "readonly"\n    },\n    "parserOptions": {\n        "ecmaVersion": 2018,\n        "sourceType": "module",\n        "ecmaFeatures": {\n            "jsx": true\n        }\n    },\n    "plugins": [\n        "plugin1",\n        "eslint-plugin-plugin2"\n    ],\n    "rules": {}\n};\n\n')])])]),a("h2",{attrs:{id:"env"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[n._v("#")]),n._v(" env")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("browser - 浏览器环境中的全局变量。\nnode - Node.js 全局变量和 Node.js 作用域。\ncommonjs - CommonJS 全局变量和 CommonJS 作用域 (用于 Browserify/WebPack 打包的只在浏览器中运行的代码)。\nshared-node-browser - Node.js 和 Browser 通用全局变量。\nes6 - 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。\nworker - Web Workers 全局变量。\namd - 将 require() 和 define() 定义为像 amd 一样的全局变量。\nmocha - 添加所有的 Mocha 测试全局变量。\njasmine - 添加所有的 Jasmine 版本 1.3 和 2.0 的测试全局变量。\njest - Jest 全局变量。\nphantomjs - PhantomJS 全局变量。\nprotractor - Protractor 全局变量。\nqunit - QUnit 全局变量。\njquery - jQuery 全局变量。\nprototypejs - Prototype.js 全局变量。\nshelljs - ShellJS 全局变量。\nmeteor - Meteor 全局变量。\nmongo - MongoDB 全局变量。\napplescript - AppleScript 全局变量。\nnashorn - Java 8 Nashorn 全局变量。\nserviceworker - Service Worker 全局变量。\natomtest - Atom 测试全局变量。\nembertest - Ember 测试全局变量。\nwebextensions - WebExtensions 全局变量。\ngreasemonkey - GreaseMonkey 全局变量。\n")])])]),a("h2",{attrs:{id:"parseroptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseroptions"}},[n._v("#")]),n._v(" parserOptions")]),n._v(" "),a("p",[a("code",[n._v("ecmaVersion -")]),n._v(" 默认设置为 3，5（默认）， 你可以使用 6、7、8、9 或 10 来指定你想要使用的 ECMAScript 版本。你也可以用使用年份命名的版本号指定为 2015（同 6），2016（同 7），或 2017（同 8）或 2018（同 9）或 2019 (same as 10)")]),n._v(" "),a("p",[a("code",[n._v("sourceType -")]),n._v(" 设置为 "),a("code",[n._v('"script"')]),n._v(" (默认) 或 "),a("code",[n._v('"module"')]),n._v("（如果你的代码是 ECMAScript 模块)。")]),n._v(" "),a("p",[a("code",[n._v("ecmaFeatures -")]),n._v(" 这是个对象，表示你想使用的额外的语言特性:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("globalReturn - 允许在全局作用域下使用 return 语句\n\nimpliedStrict - 启用全局 strict mode (如果 ecmaVersion 是 5 或更高)\n\njsx - 启用 JSX\n\nexperimentalObjectRestSpread - 启用实验性的 object rest/spread properties 支持。(重要：这是一个实验性的功能,在未来可能会有明显改变。 建议你写的规则 不要 依赖该功能，除非当它发生改变时你愿意承担维护成本。)\n")])])]),a("h2",{attrs:{id:"extends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[n._v("#")]),n._v(" extends")]),n._v(" "),a("blockquote",[a("p",[n._v("extends主要是继承已经配置完成的规则，extends 属性值可以是：")])]),n._v(" "),a("ol",[a("li",[a("p",[n._v("指定配置的字符串(配置文件的路径、可共享配置的名称、eslint:recommended 或 eslint:all)")])]),n._v(" "),a("li",[a("p",[n._v("字符串数组：每个配置继承它前面的配置")])])]),n._v(" "),a("h2",{attrs:{id:"plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[n._v("#")]),n._v(" plugins")]),n._v(" "),a("blockquote",[a("p",[n._v("plugin插件主要是为eslint新增一些检查规则")])]),n._v(" "),a("blockquote",[a("p",[n._v("ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。")])]),n._v(" "),a("blockquote",[a("p",[n._v("在配置文件里配置插件时，可以使用 plugins 关键字来存放插件名字的列表。插件名称可以省略 eslint-plugin- 前缀。")])]),n._v(" "),a("h2",{attrs:{id:"extends和plugins的配合使用-eslint-plugin-react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends和plugins的配合使用-eslint-plugin-react"}},[n._v("#")]),n._v(" extends和plugins的配合使用（eslint-plugin-react）")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("安装"),a("code",[n._v("npm install eslint-plugin-react --save-dev")])])]),n._v(" "),a("li",[a("p",[n._v("添加 "),a("code",[n._v("react")]),n._v(" 到plugins中")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{\n  "plugins": [\n    "react"\n  ]\n}\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[n._v("单独使用某个规则")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('"rules": {\n  "react/jsx-uses-react": "error",\n  "react/jsx-uses-vars": "error",\n}\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[n._v("在extends中使用")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('"extends": [\n    "plugin:react/recommended"\n]\n\n')])])]),a("h2",{attrs:{id:"rules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rules"}},[n._v("#")]),n._v(" rules")]),n._v(" "),a("blockquote",[a("p",[n._v("ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用的规则。要改变一个规则设置，你必须将规则 ID 设置为下列值之一：")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('"off" 或 0 - 关闭规则\n"warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)\n"error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)\n{\n  "eqeqeq": "off",\n}\nor\n{\n  "eqeqeq": 0,\n}\n')])])]),a("blockquote",[a("p",[n._v("可以在文件注释中单独定义规则")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/* eslint eqeqeq: 0, curly: 2 */\nor\n/* eslint eqeqeq: "off", curly: "error" */\n')])])]),a("blockquote",[a("p",[n._v('所有的规则默认都是禁用的。在配置文件中，使用 "extends": "eslint:recommended" 来启用推荐的规则。\n'),a("a",{attrs:{href:"https://eslint.bootcss.com/docs/rules/",target:"_blank",rel:"noopener noreferrer"}},[n._v("规则详情"),a("OutboundLink")],1)])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 禁止条件表达式中出现赋值操作符\n"no-cond-assign": 2,\n\n// 禁用 console\n"no-console": 0,\n\n// 禁止在条件中使用常量表达式\n// if (false) {\n//     doSomethingUnfinished();\n// }\n"no-constant-condition": 2,\n\n// 禁止在正则表达式中使用控制字符\n"no-control-regex": 2,\n\n// 数组和对象键值对最后一个逗号, never参数：不能带末尾的逗号, always参数：必须带末尾的逗号.\n// always-multiline：多行模式必须带逗号，单行模式不能带逗号\n"comma-dangle": [1, "always-multiline"],\n\n// 禁用 debugger\n"no-debugger": 2,\n\n// 禁止 function 定义中出现重名参数\n"no-dupe-args": 2,\n\n// 禁止对象字面量中出现重复的 key\n"no-dupe-keys": 2,\n\n// 禁止重复的 case 标签\n"no-duplicate-case": 2,\n\n// 禁止空语句块\n"no-empty": 2,\n\n// 禁止在正则表达式中使用空字符集 (/^abc[]/)\n"no-empty-character-class": 2,\n\n// 禁止对 catch 子句的参数重新赋值\n"no-ex-assign": 2,\n\n// 禁止不必要的布尔转换\n"no-extra-boolean-cast": 2,\n\n//  禁止不必要的括号 //(a * b) + c\n"no-extra-parens": 0,\n\n// 禁止不必要的分号\n"no-extra-semi": 2,\n\n// 禁止对 function 声明重新赋值\n"no-func-assign": 2,\n\n//  禁止在嵌套的块中出现 function 或 var 声明\n"no-inner-declarations": [2, "functions"],\n\n// 禁止 RegExp 构造函数中无效的正则表达式字符串\n"no-invalid-regexp": 2,\n\n// 禁止在字符串和注释之外不规则的空白\n"no-irregular-whitespace": 2,\n\n// 禁止在 in 表达式中出现否定的左操作数\n"no-negated-in-lhs": 2,\n\n//   禁止把全局对象 (Math 和 JSON) 作为函数调用\n"no-obj-calls": 2,\n\n// 禁止直接使用 Object.prototypes 的内置属性\n"no-prototype-builtins":0,\n\n// 禁止正则表达式字面量中出现多个空格\n"no-regex-spaces": 2,\n\n// 禁用稀疏数组\n"no-sparse-arrays": 2,\n\n// 禁止出现令人困惑的多行表达式\n"no-unexpected-multiline": 2,\n\n// 禁止在return、throw、continue 和 break语句之后出现不可达代码\n/*\n    function foo() {\n    return true;\n    console.log("done");\n    }\n*/\n"no-unreachable": 2,\n\n// 要求使用 isNaN() 检查 NaN\n"use-isnan": 2,\n\n// 强制使用有效的 JSDoc 注释\n"valid-jsdoc": 1,\n\n// 强制 typeof 表达式与有效的字符串进行比较\n// typeof foo === "undefimed" 错误\n"valid-typeof": 2,\n\n// 定义对象的set存取器属性时，强制定义get\n"accessor-pairs": 2,\n\n// 强制数组方法的回调函数中有 return 语句\n"array-callback-return":0,\n\n// 强制把变量的使用限制在其定义的作用域范围内\n"block-scoped-var": 0,\n\n// 限制圈复杂度，也就是类似if else能连续接多少个\n"complexity": [2, 9],\n\n//  要求 return 语句要么总是指定返回的值，要么不指定\n"consistent-return": 0,\n\n// 强制所有控制语句使用一致的括号风格\n"curly": [2, "all"],\n\n// switch 语句强制 default 分支，也可添加 // no default 注释取消此次警告\n"default-case": 2,\n\n// 强制object.key 中 . 的位置，参数:\n//      property，\'.\'号应与属性在同一行\n//      object, \'.\' 号应与对象名在同一行\n"dot-location": [2, "property"],\n\n// 强制使用.号取属性\n//    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性\n//                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, {"allowKeywords": false}]\n//           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, {"allowPattern": "^[a-z]+(_[a-z]+)+$"}]\n"dot-notation": [2, { "allowKeywords": false }],\n\n// 使用 === 替代 == allow-null允许null和undefined==\n"eqeqeq": [2, "allow-null"],\n\n// 要求 for-in 循环中有一个 if 语句\n"guard-for-in": 2,\n\n// 禁用 alert、confirm 和 prompt\n"no-alert": 0,\n\n// 禁用 arguments.caller 或 arguments.callee\n"no-caller": 2,\n\n// 不允许在 case 子句中使用词法声明\n"no-case-declarations":2,\n\n// 禁止除法操作符显式的出现在正则表达式开始的位置\n"no-div-regex": 2,\n\n// 禁止 if 语句中有 return 之后有 else\n"no-else-return": 0,\n\n// 禁止出现空函数.如果一个函数包含了一条注释，它将不会被认为有问题。\n"no-empty-function":2,\n\n// 禁止使用空解构模式no-empty-pattern\n"no-empty-pattern":2,\n\n// 禁止在没有类型检查操作符的情况下与 null 进行比较\n"no-eq-null": 1,\n\n// 禁用 eval()\n"no-eval": 2,\n\n// 禁止扩展原生类型\n"no-extend-native": 2,\n\n// 禁止不必要的 .bind() 调用\n"no-extra-bind": 2,\n\n// 禁用不必要的标签\n"no-extra-label:":0,\n\n// 禁止 case 语句落空\n"no-fallthrough": 2,\n\n// 禁止数字字面量中使用前导和末尾小数点\n"no-floating-decimal": 2,\n\n// 禁止使用短符号进行类型转换(!!fOO)\n"no-implicit-coercion":0,\n\n// 禁止在全局范围内使用 var 和命名的 function 声明\n"no-implicit-globals":1,\n\n// 禁止使用类似 eval() 的方法\n"no-implied-eval": 2,\n\n// 禁止 this 关键字出现在类和类对象之外\n"no-invalid-this":0,\n\n// 禁用 __iterator__ 属性\n"no-iterator": 2,\n\n//  禁用标签语句\n"no-labels": 2,\n\n// 禁用不必要的嵌套块\n"no-lone-blocks": 2,\n\n// 禁止在循环中出现 function 声明和表达式\n"no-loop-func":1,\n\n// 禁用魔术数字(3.14什么的用常量代替)\n"no-magic-numbers":[1,{ "ignore": [0,-1,1] }],\n\n// 禁止使用多个空格\n"no-multi-spaces": 2,\n\n// 禁止使用多行字符串，在 JavaScript 中，可以在新行之前使用斜线创建多行字符串\n"no-multi-str": 2,\n\n// 禁止对原生对象赋值\n"no-native-reassign": 2,\n\n// 禁止在非赋值或条件语句中使用 new 操作符\n"no-new": 2,\n\n// 禁止对 Function 对象使用 new 操作符\n"no-new-func": 0,\n\n// 禁止对 String，Number 和 Boolean 使用 new 操作符\n"no-new-wrappers": 2,\n\n// 禁用八进制字面量\n"no-octal": 2,\n\n// 禁止在字符串中使用八进制转义序列\n"no-octal-escape": 2,\n\n// 不允许对 function 的参数进行重新赋值\n"no-param-reassign": 0,\n\n// 禁用 __proto__ 属性\n"no-proto": 2,\n\n// 禁止使用 var 多次声明同一变量\n"no-redeclare": 2,\n\n// 禁用指定的通过 require 加载的模块\n"no-return-assign": 0,\n\n// 禁止使用 javascript: url\n"no-script-url": 0,\n\n// 禁止自我赋值\n"no-self-assign":2,\n\n// 禁止自身比较\n"no-self-compare": 2,\n\n// 禁用逗号操作符\n"no-sequences": 2,\n\n// 禁止抛出非异常字面量\n"no-throw-literal": 2,\n\n// 禁用一成不变的循环条件\n"no-unmodified-loop-condition":2,\n\n// 禁止出现未使用过的表达式\n"no-unused-expressions": 0,\n\n// 禁用未使用过的标签\n"no-unused-labels":2,\n\n// 禁止不必要的 .call() 和 .apply()\n"no-useless-call":2,\n\n// 禁止不必要的字符串字面量或模板字面量的连接\n"no-useless-concat":2,\n\n// 禁用不必要的转义字符\n"no-useless-escape":0,\n\n// 禁用 void 操作符\n"no-void": 0,\n\n// 禁止在注释中使用特定的警告术语\n"no-warning-comments": 0,\n\n// 禁用 with 语句\n"no-with": 2,\n\n// 强制在parseInt()使用基数参数\n"radix": 2,\n\n// 要求所有的 var 声明出现在它们所在的作用域顶部\n"vars-on-top": 0,\n\n// 要求 IIFE 使用括号括起来\n"wrap-iife": [2, "any"],\n\n// 要求或禁止 “Yoda” 条件\n"yoda": [2, "never"],\n\n// 要求或禁止使用严格模式指令\n"strict": 0,\n\n// 要求或禁止 var 声明中的初始化(初值)\n"init-declarations":0,\n\n// 不允许 catch 子句的参数与外层作用域中的变量同名\n"no-catch-shadow": 0,\n\n// 禁止删除变量\n"no-delete-var": 2,\n\n// 不允许标签与变量同名\n"no-label-var": 2,\n\n// 禁用特定的全局变量\n"no-restricted-globals":0,\n\n// 禁止 var 声明 与外层作用域的变量同名\n"no-shadow": 0,\n\n// 禁止覆盖受限制的标识符\n"no-shadow-restricted-names": 2,\n\n// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到\n"no-undef": 2,\n\n// 禁止将变量初始化为 undefined\n"no-undef-init": 2,\n\n// 禁止将 undefined 作为标识符\n"no-undefined": 0,\n\n// 禁止出现未使用过的变量\n"no-unused-vars": [2, { "vars": "all", "args": "none" }],\n\n// 不允许在变量定义之前使用它们\n"no-use-before-define": 0,\n\n// require return statements after callbacks\n"callback-return":0,\n\n// 要求 require() 出现在顶层模块作用域中\n"global-require": 1,\n\n// 要求回调函数中有容错处理\n"handle-callback-err": [2, "^(err|error)$"],\n\n// 禁止混合常规 var 声明和 require 调用\n"no-mixed-requires": 0,\n\n// 禁止调用 require 时使用 new 操作符\n"no-new-require": 2,\n\n// 禁止对 __dirname 和 __filename进行字符串连接\n"no-path-concat": 0,\n\n// 禁用 process.env\n"no-process-env": 0,\n\n// 禁用 process.exit()\n"no-process-exit": 0,\n\n// 禁用同步方法\n"no-sync": 0,\n\n// 指定数组的元素之间要以空格隔开(, 后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格\n"array-bracket-spacing": [2, "never"],\n\n// 禁止或强制在单行代码块中使用空格(禁用)\n"block-spacing":[1,"never"],\n\n//强制使用一致的缩进 第二个参数为 "tab" 时，会使用tab，\n// if while function 后面的{必须与if在同一行，java风格。\n"brace-style": [2, "1tbs", { "allowSingleLine": true }],\n\n// 双峰驼命名格式\n"camelcase": 2,\n\n// 控制逗号前后的空格\n"comma-spacing": [2, { "before": false, "after": true }],\n\n// 控制逗号在行尾出现还是在行首出现 (默认行尾)\n// http://eslint.org/docs/rules/comma-style\n"comma-style": [2, "last"],\n\n//"SwitchCase" (默认：0) 强制 switch 语句中的 case 子句的缩进水平\n// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always\n"computed-property-spacing": [2, "never"],\n\n// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了\n// e.g [0,"that"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值\n"consistent-this":  [1,"that"],\n\n// 强制使用命名的 function 表达式\n"func-names": 0,\n\n// 文件末尾强制换行\n"eol-last": 2,\n"indent": [2, 4, { "SwitchCase": 1 }],\n\n// 强制在对象字面量的属性中键和值之间使用一致的间距\n"key-spacing": [2, { "beforeColon": false, "afterColon": true }],\n\n// 强制使用一致的换行风格\n"linebreak-style": [1,"unix"],\n\n// 要求在注释周围有空行      ( 要求在块级注释之前有一空行)\n"lines-around-comment": [1,{"beforeBlockComment":true}],\n\n//  强制一致地使用函数声明或函数表达式，方法定义风格，参数：\n//    declaration: 强制使用方法声明的方式，function f(){} e.g [2, "declaration"]\n//    expression：强制使用方法表达式的方式，var f = function() {}  e.g [2, "expression"]\n//    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, "declaration", { "allowArrowFunctions": true }]\n"func-style": 0,\n\n// 强制回调函数最大嵌套深度 5层\n"max-nested-callbacks": [1,5],\n\n// 禁止使用指定的标识符\n"id-blacklist":0,\n\n// 强制标识符的最新和最大长度\n"id-length":0,\n\n// 要求标识符匹配一个指定的正则表达式\n"id-match":0,\n\n// 强制在 JSX 属性中一致地使用双引号或单引号\n"jsx-quotes":0,\n\n// 强制在关键字前后使用一致的空格 (前后腰需要)\n"keyword-spacing":2,\n\n// 强制一行的最大长度\n"max-len":[1,200],\n\n// 强制最大行数\n"max-lines":0,\n\n// 强制 function 定义中最多允许的参数数量\n"max-params":[1,7],\n\n// 强制 function 块最多允许的的语句数量\n"max-statements":[1,200],\n\n// 强制每一行中所允许的最大语句数量\n"max-statements-per-line":0,\n\n// 要求构造函数首字母大写  （要求调用 new 操作符时有首字母大小的函数，允许调用首字母大写的函数时没有 new 操作符。）\n"new-cap": [2, { "newIsCap": true, "capIsNew": false }],\n\n// 要求调用无参构造函数时有圆括号\n"new-parens": 2,\n\n// 要求或禁止 var 声明语句后有一行空行\n"newline-after-var": 0,\n\n// 禁止使用 Array 构造函数\n"no-array-constructor": 2,\n\n// 禁用按位运算符\n"no-bitwise":0,\n\n// 要求 return 语句之前有一空行\n"newline-before-return":0,\n\n// 要求方法链中每个调用都有一个换行符\n"newline-per-chained-call":1,\n\n// 禁用 continue 语句\n"no-continue": 0,\n\n// 禁止在代码行后使用内联注释\n"no-inline-comments": 0,\n\n// 禁止 if 作为唯一的语句出现在 else 语句中\n"no-lonely-if": 0,\n\n// 禁止混合使用不同的操作符\n"no-mixed-operators":0,\n\n// 不允许空格和 tab 混合缩进\n"no-mixed-spaces-and-tabs": 2,\n\n// 不允许多个空行\n"no-multiple-empty-lines": [2, { "max": 2 }],\n\n// 不允许否定的表达式\n"no-negated-condition":0,\n\n// 不允许使用嵌套的三元表达式\n"no-nested-ternary": 0,\n\n// 禁止使用 Object 的构造函数\n"no-new-object": 2,\n\n// 禁止使用一元操作符 ++ 和 --\n"no-plusplus":0,\n\n// 禁止使用特定的语法\n"no-restricted-syntax":0,\n\n// 禁止 function 标识符和括号之间出现空格\n"no-spaced-func": 2,\n\n// 不允许使用三元操作符\n"no-ternary": 0,\n\n//  禁用行尾空格\n"no-trailing-spaces": 2,\n\n// 禁止标识符中有悬空下划线_bar\n"no-underscore-dangle": 0,\n\n// 禁止可以在有更简单的可替代的表达式时使用三元操作符\n"no-unneeded-ternary": 2,\n\n// 禁止属性前有空白\n"no-whitespace-before-property":0,\n\n// 强制花括号内换行符的一致性\n"object-curly-newline":0,\n\n// 强制在花括号中使用一致的空格\n"object-curly-spacing": 0,\n\n// 强制将对象的属性放在不同的行上\n"object-property-newline":0,\n\n// 强制函数中的变量要么一起声明要么分开声明\n"one-var": [2, { "initialized": "never" }],\n\n// 要求或禁止在 var 声明周围换行\n"one-var-declaration-per-line":0,\n\n// 要求或禁止在可能的情况下要求使用简化的赋值操作符\n"operator-assignment": 0,\n\n// 强制操作符使用一致的换行符\n"operator-linebreak": [2, "after", { "overrides": { "?": "before", ":": "before" } }],\n\n// 要求或禁止块内填充\n"padded-blocks": 0,\n\n// 要求对象字面量属性名称用引号括起来\n"quote-props": 0,\n\n// 强制使用一致的反勾号、双引号或单引号\n"quotes": [2, "single", "avoid-escape"],\n\n// 要求使用 JSDoc 注释\n"require-jsdoc":1,\n\n// 要求或禁止使用分号而不是 ASI（这个才是控制行尾部分号的，）\n"semi": [2, "always"],\n\n// 强制分号之前和之后使用一致的空格\n"semi-spacing": 0,\n\n// 要求同一个声明块中的变量按顺序排列\n"sort-vars": 0,\n\n// 强制在块之前使用一致的空格\n"space-before-blocks": [2, "always"],\n\n// 强制在 function的左括号之前使用一致的空格\n"space-before-function-paren": [2, "always"],\n\n// 强制在圆括号内使用一致的空格\n"space-in-parens": [2, "never"],\n\n// 要求操作符周围有空格\n"space-infix-ops": 2,\n\n// 强制在一元操作符前后使用一致的空格\n"space-unary-ops": [2, { "words": true, "nonwords": false }],\n\n// 强制在注释中 // 或 /* 使用一致的空格\n"spaced-comment": [2, "always", { "markers": ["global", "globals", "eslint", "eslint-disable", "*package", "!"] }],\n\n// 要求或禁止 Unicode BOM\n"unicode-bom": 0,\n\n//  要求正则表达式被括号括起来\n"wrap-regex": 0,\n\n// 要求箭头函数体使用大括号\n"arrow-body-style": 2,\n\n// 要求箭头函数的参数使用圆括号\n"arrow-parens": 2,\n"arrow-spacing":[2,{ "before": true, "after": true }],\n\n// 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示\n"constructor-super": 0,\n\n// 强制 generator 函数中 * 号周围使用一致的空格\n"generator-star-spacing": [2, { "before": true, "after": true }],\n\n// 禁止修改类声明的变量\n"no-class-assign":2,\n\n// 不允许箭头功能，在那里他们可以混淆的比较\n"no-confusing-arrow":0,\n\n// 禁止修改 const 声明的变量\n"no-const-assign":2,\n\n// 禁止类成员中出现重复的名称\n"no-dupe-class-members":2,\n\n// 不允许复制模块的进口\n"no-duplicate-imports":0,\n\n// 禁止 Symbol  的构造函数\n"no-new-symbol":2,\n\n// 允许指定模块加载时的进口\n"no-restricted-imports":0,\n\n// 禁止在构造函数中，在调用 super() 之前使用 this 或 super\n"no-this-before-super": 2,\n\n// 禁止不必要的计算性能键对象的文字\n"no-useless-computed-key":0,\n\n// 要求使用 let 或 const 而不是 var\n"no-var": 0,\n\n// 要求或禁止对象字面量中方法和属性使用简写语法\n"object-shorthand": 0,\n\n// 要求使用箭头函数作为回调\n"prefer-arrow-callback":0,\n\n// 要求使用 const 声明那些声明后不再被修改的变量\n"prefer-const": 0,\n\n// 要求在合适的地方使用 Reflect 方法\n"prefer-reflect":0,\n\n// 要求使用扩展运算符而非 .apply()\n"prefer-spread":0,\n\n// 要求使用模板字面量而非字符串连接\n"prefer-template":0,\n\n// Suggest using the rest parameters instead of arguments\n"prefer-rest-params":0,\n\n// 要求generator 函数内有 yield\n"require-yield":0,\n\n// enforce spacing between rest and spread operators and their expressions\n"rest-spread-spacing":0,\n\n// 强制模块内的 import 排序\n"sort-imports":0,\n\n// 要求或禁止模板字符串中的嵌入表达式周围空格的使用\n"template-curly-spacing":1,\n\n// 强制在 yield* 表达式中 * 周围使用空格\n"yield-star-spacing":2`\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);