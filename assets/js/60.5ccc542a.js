(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{346:function(e,n,s){"use strict";s.r(n);var t=s(12),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('type：调试器类型。这里是 node(内置的调试器)，如果装了 Go 和 PHP 的扩展后对应的 type 分别为 go 和 php\nrequest：请求的类型，目前只支持 launch 和 attach。launch 就是以 debug 模式启动调试，attach 就是附加到已经启动的进程开启 debug 模式并调试，跟上一篇提到的用 node -e "process._debugProcess(PID)" 作用一样\nname：下拉菜单显示的名字。\nprogram：可执行文件或者调试器要运行的文件 (launch)\nargs：要传递给调试程序的参数 (launch)\nenv：环境变量 (launch)\ncwd：当前执行目录 (launch)\naddress：ip 地址 (launch & attach)\nport：端口号 (launch & attach)\nskipFiles：想要忽略的文件，数组类型 (launch & attach)\nprocessId：进程 PID (attach)\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("${workspaceRoot}：当前打开工程的路径\n${file}：当前打开文件的路径\n${fileBasename}：当前打开文件的名字，包含后缀名\n${fileDirname}：当前打开文件所在的文件夹的路径\n${fileExtname}：当前打开文件的后缀名\n${cwd}：当前执行目录\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "type": "node",\n  "request": "launch",\n  "name": "启动程序",\n  "skipFiles": [\n    "<node_internals>/**"\n  ],\n  "program": "${workspaceFolder}/example/index.js"\n}\n')])])]),s("ul",[s("li",[s("p",[e._v("type，代表着调试器的类型。它决定了 VS Code 会使用哪个调试插件来调试代码。")])]),e._v(" "),s("li",[s("p",[e._v("request，代表着该如何启动调试器。如果我们的代码已经运行起来了，则可以将它的值设为 attach，那么我们则是使用调试器来调试这个已有的代码进程；而如果它的值是 launch，则意味着我们会使用调试器直接启动代码并且调试。")])]),e._v(" "),s("li",[s("p",[e._v("name，就是这个配置的名字了。")])]),e._v(" "),s("li",[s("p",[e._v("program，就是告诉 Node.js 调试器，我们想要调试哪个文件。这个值支持预定义参数，比如在上面的例子里，我们使用了${file}，也就是当前编辑器里打开的文件。")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "调试 Node.js 程序 - args",\n  "type": "node",\n  "request": "launch",\n  "runtimeExecutable": "node",\n  "args": [\n    "${workspaceFolder}/src/index.js"\n  ]\n}\n')])])]),s("ul",[s("li",[e._v("runtimeExecutable，使用什么命令启动")]),e._v(" "),s("li",[e._v("args，启动时的参数")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "调试 TS Node 程序 - args",\n  "type": "node",\n  "request": "launch",\n  "runtimeExecutable": "node",\n  "runtimeArgs": [\n    "-r",\n    "ts-node/register"\n  ],\n  "args": [\n    "${workspaceFolder}/src/index.ts"\n  ]\n}\n')])])]),s("blockquote",[s("p",[e._v("在这里你看到了一个新参数 runtimeArgs，需要注意的是 runtimeArgs 是为 runtimeExecutable 环境提供的配置，而 args 是为程序提供的配置。这个 JSON 的意思是：通过 node 来启动 /src/index.ts，在启动时为 node 注入一个 ts-node/register 模块，以便可以执行 ts 类型的文件。实际执行代码为："),s("code",[e._v("node --inspect-brk=DEBUG_PORT -r ts-node/register ./src/index.ts")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "调试 TS Node 程序 - preTask",\n  "type": "node",\n  "request": "launch",\n  "program": "${workspaceFolder}/out/index.js",\n  "preLaunchTask": "tsc_build"\n}\n')])])]),s("blockquote",[s("p",[e._v("这里多了一个新的配置参数 preLaunchTask，顾名思义，在 launch 调试之前先执行一个任务，这里就涉及到 .vscode/tasks.json 文件的配置了，我们在 tasks.json 中配置一个 label 为 tsc_build 的任务")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "label": "tsc_build",\n  "type": "typescript",\n  "tsconfig": "tsconfig.json"\n}\n')])])]),s("blockquote",[s("p",[e._v("在启动调试之前，会启动一个 typescript 的编译操作，将文件编译到 out 目录下（具体可查看 tsconfig.json 的编译配置），然后通过 node 来启动编译后的文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "Attach to node",\n  "type": "node",\n  "request": "attach",\n  "processId": "${command:PickProcess}"\n}\n')])])]),s("blockquote",[s("p",[e._v("${command:PickProcess} 作为 processId 的值，因为 VSCode 会遍历所有的 Node PID 列出来让你选择")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "调试网页的 JS 文件",\n  "request": "launch",\n  "type": "chrome",\n  "file": "${workspaceFolder}/index.html"\n}\n')])])]),s("blockquote",[s("p",[e._v("注意，这里的 type 是 chrome，默认会启动一个 Chrome 浏览器（新用户）加载 file 字段对应的文件地址（通过 file:// 协议加载），文件中用到的 JS 都可以断点调试。当然你也可以起一个 Web Server 来调试 http:// 协议的文件，这里就需要设置 webRoot 和 url 参数了")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "name": "Launch via NPM",\n  "type": "node",\n  "request": "launch",\n  "runtimeExecutable": "npm",\n  "runtimeArgs": [\n    "run-script", "dev"    //这里的dev就对应package.json中的scripts中的dev\n  ],\n    "port": 9229    //这个端口是调试的端口，不是项目启动的端口\n}\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "type": "node",\n  "request": "launch",\n  "name": "nodemon",\n  "runtimeExecutable": "nodemon",\n  "args": ["${workspaceRoot}/bin/www"],\n  "restart": true,\n  "protocol": "inspector",    //相当于--inspect了\n  "sourceMaps": true,\n  "console": "integratedTerminal",\n  "internalConsoleOptions": "neverOpen",\n  "runtimeArgs": [    //对应nodemon --inspect之后除了启动文件之外的其他配置\n    "--exec",\n    "babel-node",\n    "--presets",\n    "env"\n  ]\n}\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n    "type": "node",\n    "request": "launch",\n    "name": "debug-app",\n    "runtimeExecutable": "nodemon",  要使用的运行时。一个绝对路径或路径上可用的运行时名称。如果省略，则假定为“节点”。\n    "program": "${workspaceRoot}/app.js",\n    "restart": true,\n    "console": "integratedTerminal",\n    "skipFiles": [\n        "${workspaceRoot}/node_modules/**/*.js",\n        "<node_internals>/**/*.js"\n    ]\n}\n')])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  // 使用 IntelliSense 了解相关属性。 \n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "type": "node",\n      "request": "launch",\n      "name": "nodemon",\n      "runtimeExecutable": "nodemon",\n      "program": "${workspaceRoot}/dwnews-site/bin/www",\n      "restart": true,\n      "protocol": "inspector",\n      "sourceMaps": true,\n      "console": "integratedTerminal",\n      "internalConsoleOptions": "neverOpen",\n      "cwd": "${workspaceRoot}/dwnews-site/",\n      "skipFiles": [\n        "${workspaceRoot}/dwnews-site/node_modules/**/*.js",\n        "<node_internals>/**/*.js"\n      ]\n    }\n  ]\n}\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);