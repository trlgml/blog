(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{444:function(e,t,r){"use strict";r.r(t);var s=r(28),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"基本方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本方式"}},[e._v("#")]),e._v(" 基本方式")]),e._v(" "),r("blockquote",[r("p",[e._v("server @Injectable()装饰声明service类")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n")])])]),r("blockquote",[r("p",[e._v("controller controller声明了依赖service构造器")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { Controller, Get } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { Cat } from './interfaces/cat.interface';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catsService: CatsService) {}\n\n  @Get()\n  async findAll(): Promise<Cat[]> {\n    return this.catsService.findAll();\n  }\n}\n")])])]),r("blockquote",[r("p",[e._v("module 类CatsService从cats.service.ts中引入，写入providers中")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\nimport { CatsService } from './cats/cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class AppModule {}\n")])])]),r("blockquote",[r("p",[e._v("CatsController，它首先查找所有依赖项。找到CatsService依赖项后, 对CatsService类执行查询，Nest随后将创建的实例CatsService，将其缓存并返回，或者如果已被缓存，则返回现有实例。")])]),e._v(" "),r("h3",{attrs:{id:"完整语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完整语法"}},[e._v("#")]),e._v(" 完整语法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("providers: [\n  {\n    provide: CatsService,\n    useClass: CatsService,\n  },\n];\n")])])]),r("p",[e._v("等价于")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("providers: [CatsService]\n")])])]),r("h3",{attrs:{id:"其他使用方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他使用方式"}},[e._v("#")]),e._v(" 其他使用方式")]),e._v(" "),r("blockquote",[r("p",[e._v("模拟CatsService/该useValue语法对于注入常量值")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { CatsService } from './cats.service';\n\nconst mockCatsService = {\n  /* mock implementation\n  ...\n  */\n};\n\n@Module({\n  imports: [CatsModule],\n  providers: [\n    {\n      provide: CatsService,\n      useValue: mockCatsService,\n    },\n  ],\n})\nexport class AppModule {}\n")])])]),r("blockquote",[r("p",[e._v("灵活使用字符串或符号作为DI令牌/该useValue语法对于注入常量值")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { CatsService } from './cats/cats.service';\n\n@Module({\n  providers: [\n    {\n      provide: 'CONNECTION',\n      useValue: CatsService,\n    },\n  ],\n})\nexport class AppModule {}\n")])])]),r("blockquote"),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { Controller, Get, Inject } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { Cat } from './interfaces/cat.interface';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(@Inject('CONNECTION') private catsService: CatsService) {}\n\n  @Get()\n  async findAll(): Promise<Cat[]> {\n    return this.catsService.findAll();\n  }\n}\n")])])]),r("blockquote",[r("p",[e._v("根据环境注入不同的服务")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const configServiceProvider = {\n  provide: ConfigService,\n  useClass:\n    process.env.NODE_ENV === 'development'\n      ? DevelopmentConfigService\n      : ProductionConfigService,\n};\n\n@Module({\n  providers: [configServiceProvider],\n})\nexport class AppModule {}\n")])])]),r("blockquote",[r("p",[e._v("工厂函数(将以inject相同的顺序将列表中的实例作为参数传递给factory函数)")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const connectionFactory = {\n  provide: 'CONNECTION',\n  useFactory: (optionsProvider: OptionsProvider) => {\n    const options = optionsProvider.get();\n    return new DatabaseConnection(options);\n  },\n  inject: [OptionsProvider],\n};\n\n@Module({\n  providers: [connectionFactory],\n})\nexport class AppModule {}\n\n")])])]),r("blockquote",[r("p",[e._v("别名")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Injectable()\nclass LoggerService {\n  /* implementation details */\n}\n\nconst loggerAliasProvider = {\n  provide: 'AliasedLoggerService',\n  useExisting: LoggerService,\n};\n\n@Module({\n  providers: [LoggerService, loggerAliasProvider],\n})\nexport class AppModule {}\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);