(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{390:function(t,e,n){"use strict";n.r(e);var s=n(28),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"安装依赖包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖包"}},[t._v("#")]),t._v(" 安装依赖包")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@commitlint/config-conventional \n@commitlint/cli \nhusky\nlint-staged\n")])])]),n("h2",{attrs:{id:"配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),n("ul",[n("li",[t._v("配置commitlint")])]),t._v(" "),n("ol",[n("li",[t._v("添加commitlint.config.js文件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const types = [\n  'build', \n  'ci', \n  'chore',\n  'docs', \n  'feat', \n  'fix', \n  'pref', \n  'refactor', \n  'revert', \n  'style', \n  'test'\n];\n\ntypeEnum = {\n  rules: {\n    'type-enum': [2, 'always', types]\n  },\n  value: () => types\n}\n\nmodule.exports = {\n    extends: [\n      \"@commitlint/config-conventional\"\n    ],\n    rules: {\n      'type-case': [0],\n      'type-empty': [0],\n      'scope-empty': [0],\n      'scope-case': [0],\n      'subject-full-stop': [0, 'never'],\n      'subject-case': [0, 'never'],\n      'header-max-length': [0, 'always', 72],\n      'type-enum': typeEnum.rules['type-enum']\n    }\n  };\n\n")])])]),n("ul",[n("li",[t._v("配置lint-staged（提交时检测，如果webpack已经配置则检测可不配置）")])]),t._v(" "),n("blockquote",[n("p",[t._v("配置eslinit文件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("eslinit --init\n")])])]),n("blockquote",[n("p",[t._v("添加 .lintstagedrc文件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n   "src/**/*.js": ["eslint --fix"]\n}\n或\n{\n   "src/**/*.js": "eslint"\n}\n')])])]),n("ul",[n("li",[t._v("配置husky(两种方式都可以)")])]),t._v(" "),n("blockquote",[n("p",[t._v("在package.json配置")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\n"husky": {\n    "hooks": {\n        "pre-commit": "echo \'开始\' && lint-staged",\n        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",\n        "pre-push": "echo \'结束\'"\n    }\n}\n\n')])])]),n("blockquote",[n("p",[t._v("添加.huskyrc文件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n    "hooks": {\n        "pre-commit": "echo \'开始\' && lint-staged",\n        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",\n        "pre-push": "echo \'结束\'"\n    }\n}\n')])])]),n("ul",[n("li",[t._v("pre-commit：在 git commit 之前触发")]),t._v(" "),n("li",[t._v("commit-msg：在编写 commit 信息的时候触发")]),t._v(" "),n("li",[t._v("pre-push：在 git push 之前触发")])])])}),[],!1,null,null,null);e.default=a.exports}}]);