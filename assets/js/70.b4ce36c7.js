(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{460:function(e,t,n){"use strict";n.r(t);var a=n(30),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"安装使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装使用"}},[e._v("#")]),e._v(" 安装使用")]),e._v(" "),n("ul",[n("li",[e._v("安装 "),n("code",[e._v("npm install -g typescript")])]),e._v(" "),n("li",[e._v("编译文件 "),n("code",[e._v("tsc app.ts")])])]),e._v(" "),n("h2",{attrs:{id:"基础类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[e._v("#")]),e._v(" 基础类型")]),e._v(" "),n("ul",[n("li",[e._v("boolean")]),e._v(" "),n("li",[e._v("number")]),e._v(" "),n("li",[e._v("string")]),e._v(" "),n("li",[e._v("array")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let arrayType: Array<number> = [1, 2, 3];\nor\nlet arrayType: number[] = [1, 2, 3];\n")])])]),n("ul",[n("li",[e._v("tuple")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let tupleType: [string, number];\ntupleType = ["tupleType", 1];\n')])])]),n("ul",[n("li",[e._v("enum")]),e._v(" "),n("li",[e._v("void: void 类型与 any 类型相反，它表示没有任何类型")]),e._v(" "),n("li",[e._v("null & undefined")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let undefinedType: undefined = undefined;\nlet nullType: null = null;\n")])])]),n("ul",[n("li",[e._v("any: 任意类型")]),e._v(" "),n("li",[e._v("unknown: 未知的类型")]),e._v(" "),n("li",[e._v("never: 无法达到的类型")])]),e._v(" "),n("h2",{attrs:{id:"泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[e._v("#")]),e._v(" 泛型")]),e._v(" "),n("h3",{attrs:{id:"普通版"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#普通版"}},[e._v("#")]),e._v(" 普通版")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function identity (value) {\n  return value;\n}\n\nconsole.log(identity(1))\n")])])]),n("h3",{attrs:{id:"ts版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ts版本"}},[e._v("#")]),e._v(" ts版本")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function identity (value: Number) : Number {\n  return value;\n}\n\nconsole.log(identity(1))\n")])])]),n("ul",[n("li",[e._v("这里 identity 的问题是我们将 Number 类型分配给参数和返回类型，使该函数仅可用于该原始类型。但该函数并不是可扩展或通用的。我们的目标是让 identity 函数可以适用于任何特定的类型，为了实现这个目标，我们可以使用泛型来解决这个问题")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function identity <T>(value: T) : T {\n  return value;\n}\n\nconsole.log(identity<Number>(1))\n")])])]),n("ul",[n("li",[n("p",[e._v("当我们调用 "),n("code",[e._v("identity<Number>(1)")]),e._v(" ，Number 类型就像参数 1 一样，它将在出现 T 的任何位置填充该类型。 "),n("code",[e._v("<T>")]),e._v(" 内部的 T 被称为类型变量，它是我们希望传递给 identity 函数的类型占位符，同时它被分配给 value 参数用来代替它的类型：此时 T 充当的是类型，而不是特定的 Number 类型。")])]),e._v(" "),n("li",[n("p",[e._v("其中 T 代表 Type，在定义泛型时通常用作第一个类型变量名称。但实际上 T 可以用任何有效名称代替。除了 T 之外，以下是常见泛型变量代表的意思：")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("K（Key）：表示对象中的键类型；\nV（Value）：表示对象中的值类型；\nE（Element）：表示元素类型。\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function identity <T, U>(value: T, message: U) : T {\n  console.log(message);\n  return value;\n}\n\nconsole.log(identity<Number, string>(68, "Semlinker"));\n或者\nconsole.log(identity(68, "Semlinker"));\n')])])]),n("h3",{attrs:{id:"泛型接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[e._v("#")]),e._v(" 泛型接口")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Identities<V, M> {\n  value: V,\n  message: M\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function identity<T, U> (value: T, message: U): Identities<T, U> {\n  let identities: Identities<T, U> = {\n    value,\n    message\n  };\n  return identities;\n}\n\nconsole.log(identity(68, "Semlinker"));\n')])])]),n("h2",{attrs:{id:"特殊符号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特殊符号"}},[e._v("#")]),e._v(" 特殊符号")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("!")]),e._v(" 非空断言操作符("),n("code",[e._v("name!")]),e._v(" 将 "),n("code",[e._v("name")]),e._v("值排除 "),n("code",[e._v("null")]),e._v(" 和 "),n("code",[e._v("undefined")]),e._v(")")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# 忽略null和undefined\nconst fn = (myString: string | undefined | null): void => {\n  const stringType: string = myString!;\n};\n\n# 确定赋值\nlet name!: string;\ninit();\nconsole.log(x);\n\nfunction init() {\n  x = 'name';\n}\n")])])]),n("ul",[n("li",[n("code",[e._v("?.")]),e._v(" 可选链")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("obj.prop\n")])])]),n("ul",[n("li",[n("code",[e._v("??")]),e._v("空值合并(当左侧为"),n("code",[e._v("null")]),e._v("或"),n("code",[e._v("undefined")]),e._v("时返回右侧的数据)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const name = null ?? 'name';\nconsole.log(name); // \"name\"\n\nconst age = 0 ?? 42;\nconsole.log(age); // 0\n")])])]),n("ul",[n("li",[n("code",[e._v("?:")]),e._v(" 可选属性")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student {\n  name: string;\n  age?: number;\n}\n")])])]),n("ul",[n("li",[n("code",[e._v("&")]),e._v(" Type 扩展")]),e._v(" "),n("li",[n("code",[e._v("|")]),e._v(" 联合类型")]),e._v(" "),n("li",[n("code",[e._v("as")]),e._v("和"),n("code",[e._v("<type>")]),e._v("断言")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let someValue: any = "this is a string";\nlet strLength: number = (<string>someValue).length;\n\nlet someValue: any = "this is a string";\nlet strLength: number = (someValue as string).length;\n')])])]),n("h2",{attrs:{id:"interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[e._v("#")]),e._v(" Interface")]),e._v(" "),n("ul",[n("li",[e._v("基本方法")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student {\n  name: string;\n  age: number;\n}\n")])])]),n("ul",[n("li",[e._v("可选")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student {\n  name: string;\n  age?: number;\n}\n")])])]),n("ul",[n("li",[e._v("只读（赋值后不能修改）")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student {\n  readonly name: string;\n  age: number;\n}\n")])])]),n("ul",[n("li",[e._v("任意值")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student {\n  name: string;\n  age: number;\n  [key: string]: string;\n}\n")])])]),n("h2",{attrs:{id:"type-和-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#type-和-interface"}},[e._v("#")]),e._v(" Type 和 Interface")]),e._v(" "),n("ul",[n("li",[e._v("都可以用来描述对象的结构或函数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student {\n  name: string;\n  age: number;\n}\n\ninterface Student {\n  (age: number): void;\n}\n\ntype Student = {\n  name: string;\n  age: number;\n};\n\ntype Student = (age: number) => void;\n\n")])])]),n("ul",[n("li",[e._v("类型别名可以用于一些其他类型")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type stringType = string;\ntype tupleType = [number, string];\ntype Student = StudentA | StudentB;\n")])])]),n("ul",[n("li",[e._v("都可以被扩展")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface StudentA { name: string }\ninterface Student extends StudentA { \n  age: number; \n}\n\ntype StudentA = { name: string };\ntype Student = StudentA & { age: number };\n\n")])])]),n("ul",[n("li",[e._v("接口多次定义会被合并")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Student { name: string; }\ninterface Student { age: number; }\n\nconst student: Student = { name: 'studentName', age: 20 };\n")])])]),n("h2",{attrs:{id:"装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[e._v("#")]),e._v(" 装饰器")]),e._v(" "),n("h2",{attrs:{id:"tsconfig-json"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json"}},[e._v("#")]),e._v(" tsconfig.json")]),e._v(" "),n("ul",[n("li",[e._v("files - 设置要编译的文件的名称；")]),e._v(" "),n("li",[e._v("include - 设置需要进行编译的文件，支持路径模式匹配；")]),e._v(" "),n("li",[e._v("exclude - 设置无需进行编译的文件，支持路径模式匹配；")]),e._v(" "),n("li",[e._v("compilerOptions - 设置与编译流程相关的选项。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "compilerOptions": {\n\n    /* 基本选项 */\n    "target": "es5",                       // 指定 ECMAScript 目标版本: \'ES3\' (default), \'ES5\', \'ES6\'/\'ES2015\', \'ES2016\', \'ES2017\', or \'ESNEXT\'\n    "module": "commonjs",                  // 指定使用模块: \'commonjs\', \'amd\', \'system\', \'umd\' or \'es2015\'\n    "lib": [],                             // 指定要包含在编译中的库文件\n    "allowJs": true,                       // 允许编译 javascript 文件\n    "checkJs": true,                       // 报告 javascript 文件中的错误\n    "jsx": "preserve",                     // 指定 jsx 代码的生成: \'preserve\', \'react-native\', or \'react\'\n    "declaration": true,                   // 生成相应的 \'.d.ts\' 文件\n    "sourceMap": true,                     // 生成相应的 \'.map\' 文件\n    "outFile": "./",                       // 将输出文件合并为一个文件\n    "outDir": "./",                        // 指定输出目录\n    "rootDir": "./",                       // 用来控制输出目录结构 --outDir.\n    "removeComments": true,                // 删除编译后的所有的注释\n    "noEmit": true,                        // 不生成输出文件\n    "importHelpers": true,                 // 从 tslib 导入辅助工具函数\n    "isolatedModules": true,               // 将每个文件做为单独的模块 （与 \'ts.transpileModule\' 类似）.\n\n    /* 严格的类型检查选项 */\n    "strict": true,                        // 启用所有严格类型检查选项\n    "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错\n    "strictNullChecks": true,              // 启用严格的 null 检查\n    "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误\n    "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 \'use strict\'\n\n    /* 额外的检查 */\n    "noUnusedLocals": true,                // 有未使用的变量时，抛出错误\n    "noUnusedParameters": true,            // 有未使用的参数时，抛出错误\n    "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误\n    "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）\n\n    /* 模块解析选项 */\n    "moduleResolution": "node",            // 选择模块解析策略： \'node\' (Node.js) or \'classic\' (TypeScript pre-1.6)\n    "baseUrl": "./",                       // 用于解析非相对模块名称的基目录\n    "paths": {},                           // 模块名到基于 baseUrl 的路径映射的列表\n    "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容\n    "typeRoots": [],                       // 包含类型声明的文件列表\n    "types": [],                           // 需要包含的类型声明文件名列表\n    "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。\n\n    /* Source Map Options */\n    "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置\n    "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置\n    "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件\n    "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性\n\n    /* 其他选项 */\n    "experimentalDecorators": true,        // 启用装饰器\n    "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持\n  }\n}\n\n')])])]),n("h2",{attrs:{id:"d-ts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#d-ts"}},[e._v("#")]),e._v(" .d.ts")]),e._v(" "),n("ul",[n("li",[e._v("declare var 声明全局变量")]),e._v(" "),n("li",[e._v("declare function 声明全局方法")]),e._v(" "),n("li",[e._v("declare class 声明全局类")]),e._v(" "),n("li",[e._v("declare enum 声明全局枚举类型")]),e._v(" "),n("li",[e._v("declare namespace 声明（含有子属性的）全局对象")]),e._v(" "),n("li",[e._v("interface 和 type 声明全局类型")]),e._v(" "),n("li",[e._v("export 导出变量")]),e._v(" "),n("li",[e._v("export namespace 导出（含有子属性的）对象")]),e._v(" "),n("li",[e._v("export default ES6 默认导出")]),e._v(" "),n("li",[e._v("export = commonjs 导出模块")]),e._v(" "),n("li",[e._v("export as namespace UMD 库声明全局变量")]),e._v(" "),n("li",[e._v("declare global 扩展全局变量")]),e._v(" "),n("li",[e._v("declare module 扩展模块")]),e._v(" "),n("li",[e._v("/// "),n("reference"),e._v(" 三斜线指令")],1)]),e._v(" "),n("h2",{attrs:{id:"工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[e._v("#")]),e._v(" 工具")]),e._v(" "),n("p",[n("a",{attrs:{href:"http://www.jsontots.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JSON TO TS"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.typescriptlang.org/play",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript Playground"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/typescript-eslint/typescript-eslint",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript ESLint"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);