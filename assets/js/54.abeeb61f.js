(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{339:function(s,e,n){"use strict";n.r(e);var t=n(12),o=Object(t.a)({},(function(){var s=this.$createElement,e=this._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("ul",[e("li",[this._v("参数")])]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. name - cookie的名字（原属性名为 key）。（默认：’connect.sid’）\n2. store - session存储实例\n3. secret - 用它来对session cookie签名，防止篡改\n4. cookie - session cookie设置 （默认：{ path: ‘/‘, httpOnly: true,secure: false, maxAge: null }）\n5. genid - 生成新session ID的函数 （默认使用uid2库）\n6. rolling - 在每次请求时强行设置cookie，这将重置cookie过期时间（默认：false）\n7. resave - 强制保存session即使它并没有变化 （默认： true）\n8. proxy - 当设置了secure cookies（通过”x-forwarded-proto” header ）时信任反向代理。当设定为true时，\n”x-forwarded-proto” header 将被使用。当设定为false时，所有headers将被忽略。当该属性没有被设定时，将使用Express的trust proxy。\n9. saveUninitialized - 强制将未初始化的session存储。当新建了一个session且未设定属性或值时，它就处于\n未初始化状态。在设定一个cookie前，这对于登陆验证，减轻服务端存储压力，权限控制是有帮助的。（默认：true）\n10. unset - 控制req.session是否取消（例如通过 delete，或者将它的值设置为null）。这可以使session保持存储\n状态但忽略修改或删除的请求（默认：keep）\n")])])]),e("ul",[e("li",[this._v("方法")])]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1. Session.destroy():删除session，当检测到客户端关闭时调用。\n2. Session.reload():当session有修改时，刷新session。\n3. Session.regenerate()：将已有session初始化。\n4. Session.save()：保存session。\n\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);