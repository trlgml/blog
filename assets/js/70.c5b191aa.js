(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{357:function(t,e,s){"use strict";s.r(e);var a=s(12),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"使用nest-cli设置新项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用nest-cli设置新项目"}},[t._v("#")]),t._v(" 使用Nest CLI设置新项目")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i -g @nestjs/cli\nnest new project\n")])])]),s("ul",[s("li",[t._v("安装缓慢可考虑更改 npm 镜像源，nrm使用方式。")])]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ npm i -g nrm\n\n$ nrm ls\n\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n  taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n\n$ nrm use taobao\n\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"文件说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件说明"}},[t._v("#")]),t._v(" 文件说明")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("文件")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("app.controller.ts")]),t._v(" "),s("td",[t._v("单一路径的基本控制器样本。")])]),t._v(" "),s("tr",[s("td",[t._v("app.module.ts")]),t._v(" "),s("td",[t._v("应用程序的根模块。")])]),t._v(" "),s("tr",[s("td",[t._v("main.ts")]),t._v(" "),s("td",[t._v("使用核心功能NestFactory创建Nest应用程序实例的应用程序的入口文件。")])])])]),t._v(" "),s("ul",[s("li",[t._v("main.ts包括一个异步功能。NestFactory公开了一些允许创建应用程序实例的静态方法。该create()方法返回一个实现INestApplication接口的应用程序对象。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n")])])]),s("h3",{attrs:{id:"controllers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controllers"}},[t._v("#")]),t._v(" Controllers")]),t._v(" "),s("blockquote",[s("p",[t._v("控制器负责处理传入的请求并将响应返回给客户端。我们将使用@Controller()装饰器，它是定义基本控制器所"),s("strong",[t._v("必需的")]),t._v("。我们将指定一个可选的路由路径前缀cats。在@Controller()装饰器中使用路径前缀可以使我们轻松地对一组相关的路由进行分组，并最大程度地减少重复代码。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Controller, Get } from '@nestjs/common';\n\n@Controller('cats')\nexport class CatsController {\n  @Get()\n  findAll(): string {\n    return 'This action returns all cats';\n  }\n}\n")])])]),s("blockquote",[s("p",[t._v("会为的请求生成路由映射GET /cats，Nest将请求路由到我们的用户定义的findAll()方法。我们在此处选择的方法名称完全是任意的，Nest不对选择的方法名称赋予任何意义。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("要使用CLI创建控制器，只需执行$ nest g controller cats命令\n")])])]),s("h6",{attrs:{id:"nest运用两个不同的方式来操纵响应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nest运用两个不同的方式来操纵响应"}},[t._v("#")]),t._v(" Nest运用两个不同的方式来操纵响应")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方式")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("推荐")]),t._v(" "),s("td",[t._v("使用此内置方法，当请求处理程序返回JavaScript对象或数组时，它将自动序列化为JSON。当它返回一个JavaScript基本类型（例如string，number，boolean）。此外，响应的状态码默认情况下始终为200，但使用201的POST请求除外。我们可以通过@HttpCode(...)在处理程序级别添加装饰器来轻松更改此行为（请参见状态码）。")])]),t._v(" "),s("tr",[s("td",[t._v("特定")]),t._v(" "),s("td",[t._v("我们可以使用特定于库的（例如Express）响应对象，可以使用@Res()装饰器将其注入到方法处理程序签名（例如findAll(@Res() response)）中。通过这种方法，您有能力（也有责任）使用该对象公开的本机响应处理方法。例如，使用Express，您可以使用以下代码构建响应response.status(200).send()")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("您不能同时使用两种方法。Nest检测到处理程序何时使用@Res()或@Next()，表明您已选择特定于库的选项。如果同时使用两种方法，则将针对该单条路线自动禁用 “标准”方法，并且该方法将不再按预期工作。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Nest")]),t._v(" "),s("th",[t._v("Express")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("@Request() / @Req()")]),t._v(" "),s("td",[t._v("req")])]),t._v(" "),s("tr",[s("td",[t._v("@Response() / @Res()")]),t._v(" "),s("td",[t._v("res")])]),t._v(" "),s("tr",[s("td",[t._v("@Next()")]),t._v(" "),s("td",[t._v("next")])]),t._v(" "),s("tr",[s("td",[t._v("@Session()")]),t._v(" "),s("td",[t._v("req.session")])]),t._v(" "),s("tr",[s("td",[t._v("@Param(param?: string)")]),t._v(" "),s("td",[t._v("req.params[param]")])]),t._v(" "),s("tr",[s("td",[t._v("@Body(param?: string)")]),t._v(" "),s("td",[t._v("req.body[param]")])]),t._v(" "),s("tr",[s("td",[t._v("@Query(param?: string)")]),t._v(" "),s("td",[t._v("req.query[param]")])]),t._v(" "),s("tr",[s("td",[t._v("@Headers(param?: string)")]),t._v(" "),s("td",[t._v("req.headers[param]")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Controller, Get, Req, Res, HttpStatus } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Controller('cats')\nexport class AppController {\n  @Get()\n  findAll(@Req() request: Request, @Res() response: Response) {\n    response.status(HttpStatus.OK).send('This action returns all cats')\n  }\n}\n")])])]),s("h6",{attrs:{id:"更多方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多方法"}},[t._v("#")]),t._v(" 更多方法")]),t._v(" "),s("blockquote",[s("p",[t._v("Nest 提供了标准的HTTP请求端点装饰的其余部分以相同的方式- ，@Put()，@Delete()，@Patch()，@Options()，@Head()和@All()。每个代表各自的HTTP请求方法。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Controller, Get, Post } from '@nestjs/common';\n\n@Controller('cats')\nexport class CatsController {\n  @Post()\n  create(): string {\n    return 'This action adds a new cat';\n  }\n\n  @Get()\n  findAll(): string {\n    return 'This action returns all cats';\n  }\n}\n")])])]),s("h6",{attrs:{id:"通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[t._v("#")]),t._v(" 通配符")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Get('ab*cd')\nfindAll() {\n  return 'This route uses a wildcard';\n}\n")])])]),s("h6",{attrs:{id:"状态代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态代码"}},[t._v("#")]),t._v(" 状态代码")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { HttpCode, Post } from '@nestjs/common';\n\n@Post()\n@HttpCode(204)\ncreate() {\n  return 'This action adds a new cat';\n}\n")])])]),s("h6",{attrs:{id:"响应头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应头"}},[t._v("#")]),t._v(" 响应头")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Header, Post } from '@nestjs/common';\n@Post()\n@Header('Cache-Control', 'none')\ncreate() {\n  return 'This action adds a new cat';\n}\n")])])]),s("h6",{attrs:{id:"重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[t._v("#")]),t._v(" 重定向")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Get, Redirect } from '@nestjs/common';\n\n@Get()\n@Redirect('https://nestjs.com', 301)\n")])])]),s("h6",{attrs:{id:"路由参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由参数"}},[t._v("#")]),t._v(" 路由参数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Get, Param } from '@nestjs/common';\n\n@Get(':id')\nfindOne(@Param() params): string {\n  console.log(params.id);\n  return `This action returns a #${params.id} cat`;\n}\n")])])]),s("h6",{attrs:{id:"异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),s("ul",[s("li",[t._v("async / await")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Get()\nasync findAll(): Promise<any[]> {\n  return [];\n}\n")])])]),s("ul",[s("li",[t._v("RxJS observable streams")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Get()\nfindAll(): Observable<any[]> {\n  return of([]);\n}\n")])])]),s("h6",{attrs:{id:"我们使用-module-装饰器将元数据附加到模块类-app-module-ts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我们使用-module-装饰器将元数据附加到模块类-app-module-ts"}},[t._v("#")]),t._v(" 我们使用@Module()装饰器将元数据附加到模块类(app.module.ts)")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\n\n@Module({\n  controllers: [CatsController],\n})\nexport class AppModule {}\n")])])]),s("h3",{attrs:{id:"providers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#providers"}},[t._v("#")]),t._v(" Providers")]),t._v(" "),s("p",[t._v("普通的JavaScript类，在类声明之前带有@Injectable()装饰器。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Injectable } from '@nestjs/common';\n\ninterface Cat {\n  name: string;\n  age: number;\n  breed: string;\n}\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("要使用CLI创建服务，只需执行$ nest g service cats命令\n")])])]),s("h6",{attrs:{id:"依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[t._v("#")]),t._v(" 依赖注入")]),t._v(" "),s("blockquote",[s("p",[t._v("Nest将通过CatsService创建并返回的实例到catsService，并传递给控制器的构造函数")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("constructor(private readonly catsService: CatsService) {}\n")])])]),s("h6",{attrs:{id:"现在我们已经定义了-catsservice-并且已经有了该服务的使用者-catscontroller-我们需要在nest中注册该服务-以便它可以执行注入。为此-我们编辑模块文件-app-module-ts-然后将服务添加到装饰器的providers数组中-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#现在我们已经定义了-catsservice-并且已经有了该服务的使用者-catscontroller-我们需要在nest中注册该服务-以便它可以执行注入。为此-我们编辑模块文件-app-module-ts-然后将服务添加到装饰器的providers数组中-module"}},[t._v("#")]),t._v(" 现在我们已经定义了（CatsService），并且已经有了该服务的使用者（CatsController），我们需要在Nest中注册该服务，以便它可以执行注入。为此，我们编辑模块文件（app.module.ts），然后将服务添加到装饰器的providers数组中@Module()")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Module } from '@nestjs/common';\nimport { CatsController } from './cats/cats.controller';\nimport { CatsService } from './cats/cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class AppModule {}\n")])])]),s("h3",{attrs:{id:"modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),s("blockquote",[s("p",[t._v("模块是带有@Module()装饰器的类。@Module()装饰提供了元数据Nest利用的组织应用程序结构。每个应用程序至少有一个模块，一个根模块。根模块是Nest用来构建应用程序图的起点-Nest 用来解析模块和提供者关系以及依赖关系的内部数据结构。虽然从理论上讲很小的应用程序可能只有根模块，但这不是典型的情况。我们要强调，强烈建议将模块作为组织组件的有效方法。因此，对于大多数应用而言，最终的架构将采用多个模块，每个模块封装一组紧密相关的功能。")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("providers")]),t._v(" "),s("td",[t._v("Nest注入器将实例化的提供程序，并且至少可以在此模块之间共享这些提供程序")])]),t._v(" "),s("tr",[s("td",[t._v("controllers")]),t._v(" "),s("td",[t._v("此模块中定义的必须实例化的一组控制器")])]),t._v(" "),s("tr",[s("td",[t._v("imports")]),t._v(" "),s("td",[t._v("导出模块所需的提供程序的导入模块列表")])]),t._v(" "),s("tr",[s("td",[t._v("exports")]),t._v(" "),s("td",[t._v("providers该模块提供的子集，并且应该在导入该模块的其他模块中可用")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("CatsController与CatsService属于同一应用程序域.我们将创建CatsModule")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n  exports: [CatsService]\n})\nexport class CatsModule {}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("要使用CLI创建模块，只需执行$ nest g module cats命令\n")])])]),s("blockquote",[s("p",[t._v("我们CatsModule在cats.module.ts文件中定义了，并将与此模块相关的所有内容都移到了cats目录中。我们需要做的最后一件事是将该模块导入根模块（文件中AppModule定义的app.module.ts）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Module } from '@nestjs/common';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule {}\n")])])]),s("h3",{attrs:{id:"middleware"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[t._v("#")]),t._v(" Middleware")]),t._v(" "),s("blockquote",[s("p",[t._v("中间件是在路由处理程序之前调用的函数。对请求和响应对象进行更改。结束请求-响应周期。调用堆栈中的下一个中间件函数。如果当前的中间件功能没有结束请求-响应周期，则必须调用next()将控制权传递给下一个中间件功能。否则，该请求将被挂起。")])]),t._v(" "),s("blockquote",[s("p",[t._v("可以在函数中或在带有@Injectable()装饰器的类中实现自定义Nest中间件(logger.middleware.ts)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: Function) {\n    console.log('Request...');\n    next();\n  }\n}\n")])])]),s("blockquote",[s("p",[t._v("当您的中间件不需要任何依赖项时，请考虑使用函数中间件更简单")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("export function logger(req, res, next) {\n  console.log(`Request...`);\n  next();\n};\n")])])]),s("h6",{attrs:{id:"应用中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用中间件"}},[t._v("#")]),t._v(" 应用中间件")]),t._v(" "),s("blockquote",[s("p",[t._v("@Module()装饰器中没有中间件的位置。相反，我们使用configure()模块类的方法进行设置。包含中间件的模块必须实现该NestModule接口。让我们LoggerMiddleware在AppModule级别上进行设置。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';\nimport { LoggerMiddleware } from './common/middleware/logger.middleware';\nimport { CatsModule } from './cats/cats.module';\n\n@Module({\n  imports: [CatsModule],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('cats');// cats路径的所以请求\n      //.forRoutes({ path: 'cats', method: RequestMethod.GET });cats的get请求\n      //forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });匹配'ab*cd'路由的所有请求\n  }\n}\n")])])]),s("h6",{attrs:{id:"全局中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局中间件"}},[t._v("#")]),t._v(" 全局中间件")]),t._v(" "),s("blockquote",[s("p",[t._v("如果要一次将中间件绑定到每个注册的路由，则可以使用实例INestApplication提供的方法use()")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function logger(req, res, next) {\n  next();\n}\nconst app = await NestFactory.create(AppModule);\napp.use(logger);\nawait app.listen(3000);\n")])])]),s("h6",{attrs:{id:"多个中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个中间件"}},[t._v("#")]),t._v(" 多个中间件")]),t._v(" "),s("blockquote",[s("p",[t._v("为了绑定顺序执行的多个中间件，只需在apply()方法内部提供一个逗号分隔的列表：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("consumer.apply(cors(), helmet(), logger).forRoutes(CatsController);\n")])])]),s("h6",{attrs:{id:"middleware-consumer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#middleware-consumer"}},[t._v("#")]),t._v(" Middleware consumer")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("consumer\n  .apply(LoggerMiddleware)\n  .exclude(\n    { path: 'cats', method: RequestMethod.GET },\n    { path: 'cats', method: RequestMethod.POST }\n  )\n  .forRoutes(CatsController);\n")])])]),s("h3",{attrs:{id:"exception-filters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception-filters"}},[t._v("#")]),t._v(" Exception filters")]),t._v(" "),s("blockquote",[s("p",[t._v("Nest带有内置的异常层，该层负责处理应用程序中所有未处理的异常。当您的应用程序代码未处理异常时，该层将捕获该异常，然后自动发送适当的用户友好响应。开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理类型HttpException（及其子类）的异常。如果无法识别异常（既不HttpException是继承自的类也不是HttpException），则内置异常过滤器会生成以下默认JSON响应：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "statusCode": 500,\n  "message": "Internal server error"\n}\n\n')])])]),s("h6",{attrs:{id:"抛出标准异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抛出标准异常"}},[t._v("#")]),t._v(" 抛出标准异常")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Get()\nasync findAll() {\n  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n}\n")])])]),s("h6",{attrs:{id:"自定义异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常"}},[t._v("#")]),t._v(" 自定义异常")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("export class ForbiddenException extends HttpException {\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n\n@Get()\nasync findAll() {\n  throw new ForbiddenException();\n}\n")])])]),s("h6",{attrs:{id:"内置的http-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置的http-exceptions"}},[t._v("#")]),t._v(" 内置的HTTP exceptions")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("BadRequestException\nUnauthorizedException\nNotFoundException\nForbiddenException\nNotAcceptableException\nRequestTimeoutException\nConflictException\nGoneException\nPayloadTooLargeException\nUnsupportedMediaTypeException\nUnprocessableEntityException\nInternalServerErrorException\nNotImplementedException\nBadGatewayException\nServiceUnavailableException\nGatewayTimeoutException\n")])])]),s("h6",{attrs:{id:"exception-filters-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception-filters-2"}},[t._v("#")]),t._v(" Exception filters")]),t._v(" "),s("blockquote",[s("p",[t._v("您可能希望完全控制异常层,例如，您可能要添加日志记录或基于一些动态因素使用其他JSON模式。\n(http-exception.filter.ts)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const request = ctx.getRequest<Request>();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("所有异常过滤器都应实现通用ExceptionFilter<T>接口。这要求您向catch(exception: T, host: ArgumentsHost)方法提供其指示的签名。T指示异常的类型。\n")])])]),s("blockquote",[s("p",[t._v("使用方式")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Post()\n//@UseFilters(new HttpExceptionFilter())\n@UseFilters(HttpExceptionFilter)\nasync create() {\n  throw new ForbiddenException();\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//@UseFilters(new HttpExceptionFilter())\n@UseFilters(HttpExceptionFilter)\nexport class CatsController {}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("async function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalFilters(new HttpExceptionFilter());\n  await app.listen(3000);\n}\nbootstrap();\n")])])]),s("blockquote",[s("p",[t._v("捕捉全部异常.为了捕获每个未处理的异常（无论异常类型如何），请将@Catch()修饰符的参数列表保留为空.")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus } from '@nestjs/common';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n")])])]),s("h3",{attrs:{id:"pipes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pipes"}},[t._v("#")]),t._v(" Pipes")]),t._v(" "),s("blockquote",[s("p",[t._v("管道是用@Injectable()装饰器注释的类。管道应实现该PipeTransform接口")])]),t._v(" "),s("ul",[s("li",[t._v("转换：将输入数据转换为所需的输出")]),t._v(" "),s("li",[t._v("验证：评估输入数据，如果有效，只需将其原样传递即可；否则，当数据不正确时抛出异常")])]),t._v(" "),s("blockquote",[s("p",[t._v("管道arguments均由控制器路由处理程序处理。Nest会在调用方法之前插入一个管道，并且管道会接收指定给该方法的参数。那时将进行任何转换或验证操作，然后使用任何（可能）转换后的参数调用路由处理程序。管道在例外区域内运行。这意味着，当Pipe引发异常时，它由异常层（全局异常过滤器和应用于当前上下文的所有异常过滤器）处理。鉴于以上所述，应该清楚的是，当在Pipe中引发异常时，随后将不执行任何控制器方法。")])]),t._v(" "),s("h6",{attrs:{id:"内置管道"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内置管道"}},[t._v("#")]),t._v(" 内置管道")]),t._v(" "),s("ul",[s("li",[t._v("ValidationPipe")]),t._v(" "),s("li",[t._v("ParseIntPipe")]),t._v(" "),s("li",[t._v("ParseUUIDPipe")])]),t._v(" "),s("h3",{attrs:{id:"interceptor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interceptor"}},[t._v("#")]),t._v(" Interceptor")]),t._v(" "),s("h3",{attrs:{id:"guard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#guard"}},[t._v("#")]),t._v(" Guard")]),t._v(" "),s("h3",{attrs:{id:"decorator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#decorator"}},[t._v("#")]),t._v(" Decorator")]),t._v(" "),s("h3",{attrs:{id:"循环引用的问题解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环引用的问题解决"}},[t._v("#")]),t._v(" 循环引用的问题解决")]),t._v(" "),s("ul",[s("li",[t._v("服务的循环引用")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Injectable, Inject, forwardRef } from '@nestjs/common';\n// CommonService依赖注入了CatsService，而CatsService也依赖注入了CommonService\n@Injectable()\nexport class CatsService {\n    public constructor(\n        @Inject(forwardRef(() => CommonService))\n        private readonly commonService: CommonService,\n    ) { }\n}\n@Injectable()\nexport class CommonService {\n    public constructor(\n        @Inject(forwardRef(() => CatsService))\n        private readonly catsService: CatsService,\n    ) { }\n}\n")])])]),s("ul",[s("li",[t._v("模块的循环引用")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Module({\n   imports: [forwardRef(() => CommonModule)],\n})\nexport class CatsModule {}\n\n@Module({\n   imports: [forwardRef(() => CatsModule)],\n})\nexport class CommonModule {}\n")])])]),s("ul",[s("li",[t._v("其他")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { ModuleRef } from '@nestjs/core';\n/**\n * 3.Nest提供了ModuleRef可以简单地注入任何组件的类。也是解决循环依赖的方式\n */\n@Injectable()\nexport class ModuleService implements OnModuleInit {\n    private service: CatsService;\n    public constructor(private readonly moduleRef: ModuleRef) { }\n    \n    public onModuleInit() {\n        // ModuleRef有一个get()方法，允许检索当前模块中可用的提供程序。此外，您可以切换到非严格模式，这样您就可以在整个应用程序中选择任何现有的提供程序。\n        this.service = this.moduleRef.get(CatsService, { strict: false });\n    }\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);